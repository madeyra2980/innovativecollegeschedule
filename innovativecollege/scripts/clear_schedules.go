package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"time"
)

const baseURL = "http://localhost:8080/api/v1"

func main() {
	fmt.Println("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –í–°–ï —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
	fmt.Println("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã...")
	fmt.Scanln()

	fmt.Println("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
	schedules, err := getAllSchedules()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: %v\n", err)
		return
	}

	if len(schedules) == 0 {
		fmt.Println("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å.")
		return
	}

	fmt.Printf("üìã –ù–∞–π–¥–µ–Ω–æ %d —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n", len(schedules))

	// –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
	successCount := 0
	errorCount := 0

	for i, schedule := range schedules {
		fmt.Printf("üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è %d/%d (ID: %s)... ", i+1, len(schedules), schedule["id"])

		err := deleteSchedule(schedule["id"].(string))
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
			errorCount++
		} else {
			fmt.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ")
			successCount++
		}

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
		time.Sleep(100 * time.Millisecond)
	}

	fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è:\n")
	fmt.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: %d\n", successCount)
	fmt.Printf("‚ùå –û—à–∏–±–æ–∫: %d\n", errorCount)

	if errorCount == 0 {
		fmt.Println("üéâ –í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
	} else {
		fmt.Println("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.")
	}
}

func getAllSchedules() ([]map[string]interface{}, error) {
	url := baseURL + "/schedules"
	resp, err := http.Get(url)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("HTTP %d: %s", resp.StatusCode, string(body))
	}

	var schedules []map[string]interface{}
	err = json.Unmarshal(body, &schedules)
	if err != nil {
		return nil, err
	}

	return schedules, nil
}

func deleteSchedule(id string) error {
	url := baseURL + "/schedules/" + id

	req, err := http.NewRequest("DELETE", url, nil)
	if err != nil {
		return err
	}

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return fmt.Errorf("HTTP %d: %s", resp.StatusCode, string(body))
	}

	return nil
}
